diff --git a/src/input.c b/src/input.c
index 2ac2f48..76f03c5 100644
--- a/src/input.c
+++ b/src/input.c
@@ -37,16 +37,81 @@ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 #include <linux/limits.h>
 
 
+// OpenSimHardware OSH PB Controller
+#ifdef ABS_X
+#undef ABS_X
+#define ABS_X       0x02
+#endif
+#ifdef ABS_Y
+#undef ABS_Y
+#define ABS_Y       0x03
+#endif
+#ifdef ABS_RX
+#undef ABS_RX
+#define ABS_RX      0x04
+#endif
+#ifdef ABS_RY
+#undef ABS_RY
+#define ABS_RY      0x05
+#endif
+#ifdef BTN_SOUTH
+#undef BTN_SOUTH
+#define BTN_SOUTH   0x131
+#endif
+#ifdef BTN_EAST
+#undef BTN_EAST
+#define BTN_EAST    0x130
+#endif
+#ifdef BTN_NORTH
+#undef BTN_NORTH
+#define BTN_NORTH   0x132
+#endif
+#ifdef BTN_WEST
+#undef BTN_WEST
+#define BTN_WEST    0x133
+#endif
+#ifdef BTN_SELECT
+#undef BTN_SELECT
+#define BTN_SELECT  0x137
+#endif
+#ifdef BTN_START
+#undef BTN_START
+#define BTN_START   0x136
+#endif
+#ifdef BTN_TL
+#undef BTN_TL
+#define BTN_TL      0x134
+#endif
+#ifdef BTN_TR
+#undef BTN_TR
+#define BTN_TR      0x135
+#endif
+#ifdef BTN_TL2
+#undef BTN_TL2
+#define BTN_TL2     0x13a
+#endif
+#ifdef BTN_TR2
+#undef BTN_TR2
+#define BTN_TR2     0x13b
+#endif
+#ifdef BTN_THUMBL
+#undef BTN_THUMBL
+#define BTN_THUMBL  0x138
+#endif
+#ifdef BTN_THUMBR
+#undef BTN_THUMBR
+#define BTN_THUMBR  0x139
+#endif
+
 #define BATTERY_BUFFER_SIZE (128)
 
-static const char* EVDEV_NAME = "/dev/input/by-path/platform-odroidgo2-joypad-event-joystick";
-static const char* EVDEV_NAME_2 = "/dev/input/by-path/platform-odroidgo3-joypad-event-joystick";
+static const char* EVDEV_NAME = "/dev/input/by-path/platform-ff300000.usb-usb-0:1.2:1.0-event-joystick";
 static const char* BATTERY_STATUS_NAME = "/sys/class/power_supply/battery/status";
 static const char* BATTERY_CAPACITY_NAME = "/sys/class/power_supply/battery/capacity";
 
 
 #define GO2_THUMBSTICK_COUNT (Go2InputThumbstick_Right + 1)
-#define GO2_BUTTON_COUNT (Go2InputButton_TriggerRight + 1)
+#define GO2_BUTTON_COUNT (Go2InputButton_ThumbRight + 1)
 
 
 typedef struct go2_input_state
@@ -155,80 +220,74 @@ static void* input_task(void* arg)
 
     if (!input->dev) return NULL;
 
+    const int abs_x_min = libevdev_get_abs_minimum(input->dev, ABS_X);
+    const int abs_y_min = libevdev_get_abs_minimum(input->dev, ABS_Y);
     const int abs_x_max = libevdev_get_abs_maximum(input->dev, ABS_X);
     const int abs_y_max = libevdev_get_abs_maximum(input->dev, ABS_Y);
+    const int abs_x_mid = (abs_x_max - abs_x_min) / 2 + abs_x_min;
+    const int abs_y_mid = (abs_y_max - abs_y_min) / 2 + abs_y_min;
 
+    const int abs_rx_min = libevdev_get_abs_minimum(input->dev, ABS_RX);
+    const int abs_ry_min = libevdev_get_abs_minimum(input->dev, ABS_RY);
     const int abs_rx_max = libevdev_get_abs_maximum(input->dev, ABS_RX);
     const int abs_ry_max = libevdev_get_abs_maximum(input->dev, ABS_RY);
+    const int abs_rx_mid = (abs_rx_max - abs_rx_min) / 2 + abs_rx_min;
+    const int abs_ry_mid = (abs_ry_max - abs_ry_min) / 2 + abs_ry_min;
 
     //printf("abs: x_max=%d, y_max=%d\n", abs_x_max, abs_y_max);
     
 
     // Get current state
-    input->current_state.buttons[Go2InputButton_DPadUp] = libevdev_get_event_value(input->dev, EV_KEY, BTN_DPAD_UP) ? ButtonState_Pressed : ButtonState_Released;
-    input->current_state.buttons[Go2InputButton_DPadDown] = libevdev_get_event_value(input->dev, EV_KEY, BTN_DPAD_DOWN) ? ButtonState_Pressed : ButtonState_Released;
-    input->current_state.buttons[Go2InputButton_DPadLeft] = libevdev_get_event_value(input->dev, EV_KEY, BTN_DPAD_LEFT) ? ButtonState_Pressed : ButtonState_Released;
-    input->current_state.buttons[Go2InputButton_DPadRight] = libevdev_get_event_value(input->dev, EV_KEY, BTN_DPAD_RIGHT) ? ButtonState_Pressed : ButtonState_Released;
+    input->current_state.buttons[Go2InputButton_DPadUp] = libevdev_get_event_value(input->dev, EV_ABS, ABS_HAT0Y) == -1 ? ButtonState_Pressed : ButtonState_Released;
+    input->current_state.buttons[Go2InputButton_DPadDown] = libevdev_get_event_value(input->dev, EV_ABS, ABS_HAT0Y) == 1 ? ButtonState_Pressed : ButtonState_Released;
+    input->current_state.buttons[Go2InputButton_DPadLeft] = libevdev_get_event_value(input->dev, EV_ABS, ABS_HAT0X) == -1 ? ButtonState_Pressed : ButtonState_Released;
+    input->current_state.buttons[Go2InputButton_DPadRight] = libevdev_get_event_value(input->dev, EV_ABS, ABS_HAT0X) == 1 ? ButtonState_Pressed : ButtonState_Released;
 
     input->current_state.buttons[Go2InputButton_A] = libevdev_get_event_value(input->dev, EV_KEY, BTN_EAST) ? ButtonState_Pressed : ButtonState_Released;
     input->current_state.buttons[Go2InputButton_B] = libevdev_get_event_value(input->dev, EV_KEY, BTN_SOUTH) ? ButtonState_Pressed : ButtonState_Released;
     input->current_state.buttons[Go2InputButton_X] = libevdev_get_event_value(input->dev, EV_KEY, BTN_NORTH) ? ButtonState_Pressed : ButtonState_Released;
     input->current_state.buttons[Go2InputButton_Y] = libevdev_get_event_value(input->dev, EV_KEY, BTN_WEST) ? ButtonState_Pressed : ButtonState_Released;
 
+    input->current_state.buttons[Go2InputButton_Select] = libevdev_get_event_value(input->dev, EV_KEY, BTN_SELECT) ? ButtonState_Pressed : ButtonState_Released;
+    input->current_state.buttons[Go2InputButton_Start] = libevdev_get_event_value(input->dev, EV_KEY, BTN_START) ? ButtonState_Pressed : ButtonState_Released;
+
     input->current_state.buttons[Go2InputButton_TopLeft] = libevdev_get_event_value(input->dev, EV_KEY, BTN_TL) ? ButtonState_Pressed : ButtonState_Released;
     input->current_state.buttons[Go2InputButton_TopRight] = libevdev_get_event_value(input->dev, EV_KEY, BTN_TR) ? ButtonState_Pressed : ButtonState_Released;
 
-    input->current_state.buttons[Go2InputButton_F1] = libevdev_get_event_value(input->dev, EV_KEY, BTN_TRIGGER_HAPPY1) ? ButtonState_Pressed : ButtonState_Released;
-    input->current_state.buttons[Go2InputButton_F2] = libevdev_get_event_value(input->dev, EV_KEY, BTN_TRIGGER_HAPPY2) ? ButtonState_Pressed : ButtonState_Released;
-    input->current_state.buttons[Go2InputButton_F3] = libevdev_get_event_value(input->dev, EV_KEY, BTN_TRIGGER_HAPPY3) ? ButtonState_Pressed : ButtonState_Released;
-    input->current_state.buttons[Go2InputButton_F4] = libevdev_get_event_value(input->dev, EV_KEY, BTN_TRIGGER_HAPPY4) ? ButtonState_Pressed : ButtonState_Released;
-    input->current_state.buttons[Go2InputButton_F5] = libevdev_get_event_value(input->dev, EV_KEY, BTN_TRIGGER_HAPPY5) ? ButtonState_Pressed : ButtonState_Released;
-    input->current_state.buttons[Go2InputButton_F6] = libevdev_get_event_value(input->dev, EV_KEY, BTN_TRIGGER_HAPPY6) ? ButtonState_Pressed : ButtonState_Released;
-
     input->current_state.buttons[Go2InputButton_TriggerLeft] = libevdev_get_event_value(input->dev, EV_KEY, BTN_TL2) ? ButtonState_Pressed : ButtonState_Released;
     input->current_state.buttons[Go2InputButton_TriggerRight] = libevdev_get_event_value(input->dev, EV_KEY, BTN_TR2) ? ButtonState_Pressed : ButtonState_Released;
 
-    input->current_state.thumbs[Go2InputThumbstick_Left].x = libevdev_get_event_value(input->dev, EV_ABS, ABS_X) / (float)abs_x_max;
-    input->current_state.thumbs[Go2InputThumbstick_Left].y = libevdev_get_event_value(input->dev, EV_ABS, ABS_Y) / (float)abs_y_max;
+    input->current_state.buttons[Go2InputButton_ThumbLeft] = libevdev_get_event_value(input->dev, EV_KEY, BTN_THUMBL) ? ButtonState_Pressed : ButtonState_Released;
+    input->current_state.buttons[Go2InputButton_ThumbRight] = libevdev_get_event_value(input->dev, EV_KEY, BTN_THUMBR) ? ButtonState_Pressed : ButtonState_Released;
+
+    input->current_state.thumbs[Go2InputThumbstick_Left].x = (libevdev_get_event_value(input->dev, EV_ABS, ABS_X) - abs_x_mid) * 2 / (float)(abs_x_max - abs_x_min);
+    input->current_state.thumbs[Go2InputThumbstick_Left].y = (libevdev_get_event_value(input->dev, EV_ABS, ABS_Y) - abs_y_mid) * 2 / (float)(abs_y_max - abs_y_min);
 
-    input->current_state.thumbs[Go2InputThumbstick_Right].x = libevdev_get_event_value(input->dev, EV_ABS, ABS_RX) / (float)abs_rx_max;
-    input->current_state.thumbs[Go2InputThumbstick_Right].y = libevdev_get_event_value(input->dev, EV_ABS, ABS_RY) / (float)abs_ry_max;
+    input->current_state.thumbs[Go2InputThumbstick_Right].x = (libevdev_get_event_value(input->dev, EV_ABS, ABS_RX) - abs_rx_mid) * 2 / (float)(abs_rx_max - abs_rx_min);
+    input->current_state.thumbs[Go2InputThumbstick_Right].y = (libevdev_get_event_value(input->dev, EV_ABS, ABS_RY) - abs_ry_mid) * 2 / (float)(abs_ry_max - abs_ry_min);
 
 
     // Events
-	while (!input->terminating)
-	{
-		/* EAGAIN is returned when the queue is empty */
-		struct input_event ev;
-		int rc = libevdev_next_event(input->dev, LIBEVDEV_READ_FLAG_BLOCKING, &ev);
-		if (rc == 0)
-		{
+    while (!input->terminating)
+    {
+        /* EAGAIN is returned when the queue is empty */
+        struct input_event ev;
+        int rc = libevdev_next_event(input->dev, LIBEVDEV_READ_FLAG_BLOCKING, &ev);
+        if (rc == 0)
+        {
 #if 0
-			printf("Gamepad Event: %s-%s(%d)=%d\n",
-			       libevdev_event_type_get_name(ev.type),
-			       libevdev_event_code_get_name(ev.type, ev.code), ev.code,
-			       ev.value);
+            printf("Gamepad Event: %s-%s(%d)=%d\n",
+                   libevdev_event_type_get_name(ev.type),
+                   libevdev_event_code_get_name(ev.type, ev.code), ev.code,
+                   ev.value);
 #endif
 
             if (ev.type == EV_KEY)
-			{
+            {
                 go2_button_state_t state = ev.value ? ButtonState_Pressed : ButtonState_Released;
 
                 switch (ev.code)
                 {
-                    case BTN_DPAD_UP:
-                        input->pending_state.buttons[Go2InputButton_DPadUp] = state;
-                        break;
-                    case BTN_DPAD_DOWN:
-                        input->pending_state.buttons[Go2InputButton_DPadDown] = state;
-                        break;
-                    case BTN_DPAD_LEFT:
-                        input->pending_state.buttons[Go2InputButton_DPadLeft] = state;
-                        break;
-                    case BTN_DPAD_RIGHT:
-                        input->pending_state.buttons[Go2InputButton_DPadRight] = state;
-                        break;
-
                     case BTN_EAST:
                         input->pending_state.buttons[Go2InputButton_A] = state;
                         break;
@@ -242,39 +301,34 @@ static void* input_task(void* arg)
                         input->pending_state.buttons[Go2InputButton_Y] = state;
                         break;
 
+                    case BTN_SELECT:
+                        input->pending_state.buttons[Go2InputButton_Select] = state;
+                        break;
+                    case BTN_START:
+                        input->pending_state.buttons[Go2InputButton_Start] = state;
+                        break;
+
                     case BTN_TL:
                         input->pending_state.buttons[Go2InputButton_TopLeft] = state;
                         break;                    
-                    case BTN_TR:          
+                    case BTN_TR:
                         input->pending_state.buttons[Go2InputButton_TopRight] = state;
                         break;
 
-                    case BTN_TRIGGER_HAPPY1:
-                        input->pending_state.buttons[Go2InputButton_F1] = state;
-                        break;
-                    case BTN_TRIGGER_HAPPY2:
-                        input->pending_state.buttons[Go2InputButton_F2] = state;
-                        break;
-                    case BTN_TRIGGER_HAPPY3:
-                        input->pending_state.buttons[Go2InputButton_F3] = state;
-                        break;
-                    case BTN_TRIGGER_HAPPY4:
-                        input->pending_state.buttons[Go2InputButton_F4] = state;
-                        break;
-                    case BTN_TRIGGER_HAPPY5:
-                        input->pending_state.buttons[Go2InputButton_F5] = state;
-                        break;
-                    case BTN_TRIGGER_HAPPY6:
-                        input->pending_state.buttons[Go2InputButton_F6] = state;
-                        break;
-
                     case BTN_TL2:
                         input->pending_state.buttons[Go2InputButton_TriggerLeft] = state;
                         break;                    
-                    case BTN_TR2:          
+                    case BTN_TR2:
                         input->pending_state.buttons[Go2InputButton_TriggerRight] = state;
                         break;
 
+                    case BTN_THUMBL:
+                        input->pending_state.buttons[Go2InputButton_ThumbLeft] = state;
+                        break;
+                    case BTN_THUMBR:
+                        input->pending_state.buttons[Go2InputButton_ThumbRight] = state;
+                        break;
+
                 }
             }
             else if (ev.type == EV_ABS)
@@ -282,17 +336,38 @@ static void* input_task(void* arg)
                 switch (ev.code)
                 {
                     case ABS_X:
-                        input->pending_state.thumbs[Go2InputThumbstick_Left].x = ev.value / (float)abs_x_max;
+                        input->pending_state.thumbs[Go2InputThumbstick_Left].x = (ev.value - abs_x_mid) * 2 / (float)(abs_x_max - abs_x_min);
                         break;
                     case ABS_Y:
-                        input->pending_state.thumbs[Go2InputThumbstick_Left].y = ev.value / (float)abs_y_max;
+                        input->pending_state.thumbs[Go2InputThumbstick_Left].y = (ev.value - abs_y_mid) * 2 / (float)(abs_y_max - abs_y_min);
                         break;
 
                     case ABS_RX:
-                        input->pending_state.thumbs[Go2InputThumbstick_Right].x = ev.value / (float)abs_rx_max;
+                        input->pending_state.thumbs[Go2InputThumbstick_Right].x = (ev.value - abs_rx_mid) * 2 / (float)(abs_rx_max - abs_rx_min);
                         break;
                     case ABS_RY:
-                        input->pending_state.thumbs[Go2InputThumbstick_Right].y = ev.value / (float)abs_ry_max;
+                        input->pending_state.thumbs[Go2InputThumbstick_Right].y = (ev.value - abs_ry_mid) * 2 / (float)(abs_ry_max - abs_ry_min);
+                        break;
+
+                    case ABS_HAT0X:
+                        if (ev.value == -1) {
+                            input->pending_state.buttons[Go2InputButton_DPadLeft] = ButtonState_Pressed;
+                        } else if (ev.value == 1) {
+                            input->pending_state.buttons[Go2InputButton_DPadRight] = ButtonState_Pressed;
+                        } else {
+                            input->pending_state.buttons[Go2InputButton_DPadLeft] = ButtonState_Released;
+                            input->pending_state.buttons[Go2InputButton_DPadRight] = ButtonState_Released;
+                        }
+                        break;
+                    case ABS_HAT0Y:
+                        if (ev.value == -1) {
+                            input->pending_state.buttons[Go2InputButton_DPadUp] = ButtonState_Pressed;
+                        } else if (ev.value == 1) {
+                            input->pending_state.buttons[Go2InputButton_DPadDown] = ButtonState_Pressed;
+                        } else {
+                            input->pending_state.buttons[Go2InputButton_DPadUp] = ButtonState_Released;
+                            input->pending_state.buttons[Go2InputButton_DPadDown] = ButtonState_Released;
+                        }
                         break;
                 }
             }
@@ -313,7 +388,7 @@ static void* input_task(void* arg)
 go2_input_t* go2_input_create()
 {
 
-	int rc = 1;
+    int rc = 1;
 
     go2_input_t* result = malloc(sizeof(*result));
     if (!result)
@@ -331,11 +406,7 @@ go2_input_t* go2_input_create()
     result->fd = open(EVDEV_NAME, O_RDONLY);
     if (result->fd < 0)
     {
-        result->fd = open(EVDEV_NAME_2, O_RDONLY);
-        if (result->fd < 0)
-        {
-            printf("Joystick: No gamepad found.\n");
-        }
+        printf("Joystick: No gamepad found.\n");
     }
     
     if (result->fd > -1)
@@ -403,6 +474,8 @@ void go2_input_gamepad_read(go2_input_t* input, go2_gamepad_state_t* outGamepadS
     
     outGamepadState->thumb.x = input->current_state.thumbs[Go2InputThumbstick_Left].x;
     outGamepadState->thumb.y = input->current_state.thumbs[Go2InputThumbstick_Left].y;
+    outGamepadState->thumb.rx = input->current_state.thumbs[Go2InputThumbstick_Right].x;
+    outGamepadState->thumb.ry = input->current_state.thumbs[Go2InputThumbstick_Right].y;
 
     outGamepadState->dpad.up = input->current_state.buttons[Go2InputButton_DPadUp];
     outGamepadState->dpad.down = input->current_state.buttons[Go2InputButton_DPadDown];
@@ -414,15 +487,17 @@ void go2_input_gamepad_read(go2_input_t* input, go2_gamepad_state_t* outGamepadS
     outGamepadState->buttons.x = input->current_state.buttons[Go2InputButton_X];
     outGamepadState->buttons.y = input->current_state.buttons[Go2InputButton_Y];
 
+    outGamepadState->buttons.select = input->current_state.buttons[Go2InputButton_Select];
+    outGamepadState->buttons.start = input->current_state.buttons[Go2InputButton_Start];
+
     outGamepadState->buttons.top_left = input->current_state.buttons[Go2InputButton_TopLeft];
     outGamepadState->buttons.top_right = input->current_state.buttons[Go2InputButton_TopRight];
 
-    outGamepadState->buttons.f1 = input->current_state.buttons[Go2InputButton_F1];
-    outGamepadState->buttons.f2 = input->current_state.buttons[Go2InputButton_F2];
-    outGamepadState->buttons.f3 = input->current_state.buttons[Go2InputButton_F3];
-    outGamepadState->buttons.f4 = input->current_state.buttons[Go2InputButton_F4];
-    outGamepadState->buttons.f5 = input->current_state.buttons[Go2InputButton_F5];
-    outGamepadState->buttons.f6 = input->current_state.buttons[Go2InputButton_F6];
+    outGamepadState->buttons.trigger_left = input->current_state.buttons[Go2InputButton_TriggerLeft];
+    outGamepadState->buttons.trigger_right = input->current_state.buttons[Go2InputButton_TriggerRight];
+
+    outGamepadState->buttons.thumb_left = input->current_state.buttons[Go2InputButton_ThumbLeft];
+    outGamepadState->buttons.thumb_right = input->current_state.buttons[Go2InputButton_ThumbRight];
 
     pthread_mutex_unlock(&input->gamepadMutex);  
 }
diff --git a/src/input.h b/src/input.h
index a24b902..5b57d01 100644
--- a/src/input.h
+++ b/src/input.h
@@ -26,6 +26,8 @@ typedef struct
 {
     float x;
     float y;
+    float rx;
+    float ry;
 } go2_thumb_t;
 
 typedef enum 
@@ -42,16 +44,17 @@ typedef struct
     go2_button_state_t x;
     go2_button_state_t y;
 
+    go2_button_state_t select;
+    go2_button_state_t start;
+
     go2_button_state_t top_left;
     go2_button_state_t top_right;
 
-    go2_button_state_t f1;
-    go2_button_state_t f2;
-    go2_button_state_t f3;
-    go2_button_state_t f4;
-    go2_button_state_t f5;
-    go2_button_state_t f6;
+    go2_button_state_t trigger_left;
+    go2_button_state_t trigger_right;
 
+    go2_button_state_t thumb_left;
+    go2_button_state_t thumb_right;
 } go2_gamepad_buttons_t;
 
 typedef struct 
@@ -116,18 +119,17 @@ typedef enum
     Go2InputButton_X,
     Go2InputButton_Y,
 
-    Go2InputButton_F1,
-    Go2InputButton_F2,
-    Go2InputButton_F3,
-    Go2InputButton_F4,
-    Go2InputButton_F5,
-    Go2InputButton_F6,
+    Go2InputButton_Select,
+    Go2InputButton_Start,
 
     Go2InputButton_TopLeft,
     Go2InputButton_TopRight,
 
     Go2InputButton_TriggerLeft,
-    Go2InputButton_TriggerRight
+    Go2InputButton_TriggerRight,
+
+    Go2InputButton_ThumbLeft,
+    Go2InputButton_ThumbRight
 } go2_input_button_t;
 
 typedef struct go2_input_state go2_input_state_t;
