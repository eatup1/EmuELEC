diff --git a/drivers/input/evdev.c b/drivers/input/evdev.c
index e9ae3d500a55..a15122d9bab2 100644
--- a/drivers/input/evdev.c
+++ b/drivers/input/evdev.c
@@ -15,6 +15,15 @@
 #define EVDEV_MIN_BUFFER_SIZE	64U
 #define EVDEV_BUF_PACKETS	8
 
+#define RG351P_ABS_Z_MIN (1000-11)
+#define RG351P_ABS_Z_MAX (3095-11)
+#define RG351P_ABS_RX_MIN (1000-43)
+#define RG351P_ABS_RX_MAX (3095-43)
+#define RG351P_ABS_RY_MIN (1000-4)
+#define RG351P_ABS_RY_MAX (3095-4)
+#define RG351P_ABS_RZ_MIN (1000-42)
+#define RG351P_ABS_RZ_MAX (3095-42)
+
 #include <linux/poll.h>
 #include <linux/sched.h>
 #include <linux/slab.h>
@@ -260,6 +269,7 @@ static void evdev_pass_values(struct evdev_client *client,
 			ktime_t *ev_time)
 {
 	struct evdev *evdev = client->evdev;
+	struct input_dev *dev = evdev->handle.dev;	// RG351P
 	const struct input_value *v;
 	struct input_event event;
 	bool wakeup = false;
@@ -287,6 +297,35 @@ static void evdev_pass_values(struct evdev_client *client,
 		event.type = v->type;
 		event.code = v->code;
 		event.value = v->value;
+		// [RG351P] OpenSimHardware OSH PB Controller
+		if (dev->id.vendor == 0x1209 && dev->id.product == 0x3100) {
+			if (v->type == EV_ABS) {
+				switch(event.code) {
+				case ABS_Z:		// Analog1 X
+					if (event.value < RG351P_ABS_Z_MIN) event.value = RG351P_ABS_Z_MIN;
+					if (event.value > RG351P_ABS_Z_MAX) event.value = RG351P_ABS_Z_MAX;
+					event.value = 4095 * (event.value - RG351P_ABS_Z_MIN) / (RG351P_ABS_Z_MAX - RG351P_ABS_Z_MIN); //event.value = 4095 * (RG351P_ABS_Z_MAX - event.value) / (RG351P_ABS_Z_MAX - RG351P_ABS_Z_MIN);
+					break;
+				case ABS_RX:	// Analog1 Y
+					if (event.value < RG351P_ABS_RX_MIN) event.value = RG351P_ABS_RX_MIN;
+					if (event.value > RG351P_ABS_RX_MAX) event.value = RG351P_ABS_RX_MAX;
+					event.value = 4095 * (event.value - RG351P_ABS_RX_MIN) / (RG351P_ABS_RX_MAX - RG351P_ABS_RX_MIN); //event.value = 4095 * (RG351P_ABS_RX_MAX - event.value) / (RG351P_ABS_RX_MAX - RG351P_ABS_RX_MIN);
+					break;
+				case ABS_RY:	// Analog2 X
+					if (event.value < RG351P_ABS_RY_MIN) event.value = RG351P_ABS_RY_MIN;
+					if (event.value > RG351P_ABS_RY_MAX) event.value = RG351P_ABS_RY_MAX;
+					event.value = 4095 * (event.value - RG351P_ABS_RY_MIN) / (RG351P_ABS_RY_MAX - RG351P_ABS_RY_MIN);
+					break;
+				case ABS_RZ:	// Analog2 Y
+					if (event.value < RG351P_ABS_RZ_MIN) event.value = RG351P_ABS_RZ_MIN;
+					if (event.value > RG351P_ABS_RZ_MAX) event.value = RG351P_ABS_RZ_MAX;
+					event.value = 4095 * (event.value - RG351P_ABS_RZ_MIN) / (RG351P_ABS_RZ_MAX - RG351P_ABS_RZ_MIN);
+					break;
+				default:
+					break;
+				}
+			}
+		}
 		__pass_event(client, &event);
 	}
 
@@ -808,7 +847,7 @@ static int handle_eviocgbit(struct input_dev *dev,
 			    void __user *p, int compat_mode)
 {
 	unsigned long *bits;
-	int len;
+	int len, nr;
 
 	switch (type) {
 
@@ -824,6 +863,26 @@ static int handle_eviocgbit(struct input_dev *dev,
 	default: return -EINVAL;
 	}
 
+	// [RG351P] OpenSimHardware OSH PB Controller (Remove Unused feature)
+	if (dev->id.vendor == 0x1209 && dev->id.product == 0x3100) {
+		if (type == EV_KEY) {
+			for (nr = 0; nr < BTN_GAMEPAD; nr++) {
+				clear_bit(nr, bits);
+			}
+			for (nr = BTN_MODE; nr < KEY_MAX; nr++) {
+				clear_bit(nr, bits);
+			}
+		} else if (type == EV_ABS) {
+			for (nr = ABS_THROTTLE; nr <= ABS_BRAKE; nr++) {
+				clear_bit(nr, bits);
+			}
+			for (nr = ABS_HAT1X; nr <= ABS_HAT3Y; nr++) {
+				clear_bit(nr, bits);
+			}
+		} else if (type == EV_MSC) {
+			clear_bit(MSC_SCAN, bits);
+		}
+	}
 	return bits_to_user(bits, len, size, p, compat_mode);
 }
 
diff --git a/drivers/input/joydev.c b/drivers/input/joydev.c
index 5d11fea3c8ec..e45ac874e7f1 100644
--- a/drivers/input/joydev.c
+++ b/drivers/input/joydev.c
@@ -601,6 +601,12 @@ static long joydev_compat_ioctl(struct file *file,
 		goto out;
 	}
 
+	// [RG351P] OpenSimHardware OSH PB Controller
+	if (!strcmp(joydev->handle.dev->name, "OpenSimHardware OSH PB Controller")) {
+		joydev->nabs = 8;
+		joydev->nkey = 12;
+	}
+
 	switch (cmd) {
 
 	case JS_SET_TIMELIMIT:
@@ -666,6 +672,12 @@ static long joydev_ioctl(struct file *file,
 		goto out;
 	}
 
+	// [RG351P] OpenSimHardware OSH PB Controller
+	if (!strcmp(joydev->handle.dev->name, "OpenSimHardware OSH PB Controller")) {
+		joydev->nabs = 8;
+		joydev->nkey = 12;
+	}
+
 	switch (cmd) {
 
 	case JS_SET_TIMELIMIT:
