diff --git a/drivers/input/evdev.c b/drivers/input/evdev.c
index e9ae3d500a55..6da6caf0e13c 100644
--- a/drivers/input/evdev.c
+++ b/drivers/input/evdev.c
@@ -260,6 +260,7 @@ static void evdev_pass_values(struct evdev_client *client,
 			ktime_t *ev_time)
 {
 	struct evdev *evdev = client->evdev;
+	struct input_dev *dev = evdev->handle.dev;	// RG351V
 	const struct input_value *v;
 	struct input_event event;
 	bool wakeup = false;
@@ -287,6 +288,19 @@ static void evdev_pass_values(struct evdev_client *client,
 		event.type = v->type;
 		event.code = v->code;
 		event.value = v->value;
+		// [RG351V] OpenSimHardware OSH PB Controller
+		if (dev->id.vendor == 0x1209 && dev->id.product == 0x3100) {
+			if (v->type == EV_ABS) {
+				switch(event.code) {
+				case ABS_Z:		// ABS_X
+				case ABS_RX:	// ABS_Y
+					event.value = 4095 - event.value;
+					break;
+				default:
+					break;
+				}
+			}
+		}
 		__pass_event(client, &event);
 	}
 
@@ -808,7 +822,7 @@ static int handle_eviocgbit(struct input_dev *dev,
 			    void __user *p, int compat_mode)
 {
 	unsigned long *bits;
-	int len;
+	int len, nr;
 
 	switch (type) {
 
@@ -824,6 +838,26 @@ static int handle_eviocgbit(struct input_dev *dev,
 	default: return -EINVAL;
 	}
 
+	// [RG351V] OpenSimHardware OSH PB Controller (Remove Unused feature)
+	if (dev->id.vendor == 0x1209 && dev->id.product == 0x3100) {
+		if (type == EV_KEY) {
+			for (nr = 0; nr < BTN_GAMEPAD; nr++) {
+				clear_bit(nr, bits);
+			}
+			for (nr = BTN_MODE; nr < KEY_MAX; nr++) {
+				clear_bit(nr, bits);
+			}
+		} else if (type == EV_ABS) {
+			for (nr = ABS_THROTTLE; nr <= ABS_BRAKE; nr++) {
+				clear_bit(nr, bits);
+			}
+			for (nr = ABS_HAT1X; nr <= ABS_HAT3Y; nr++) {
+				clear_bit(nr, bits);
+			}
+		} else if (type == EV_MSC) {
+			clear_bit(MSC_SCAN, bits);
+		}
+	}
 	return bits_to_user(bits, len, size, p, compat_mode);
 }
 
diff --git a/drivers/input/joydev.c b/drivers/input/joydev.c
index 5d11fea3c8ec..706b52ef2777 100644
--- a/drivers/input/joydev.c
+++ b/drivers/input/joydev.c
@@ -137,6 +137,17 @@ static void joydev_event(struct input_handle *handle,
 		event.number = joydev->absmap[code];
 		event.value = joydev_correct(value,
 					&joydev->corr[event.number]);
+		// [RG351V] OpenSimHardware OSH PB Controller
+		if (!strcmp(joydev->handle.dev->name, "OpenSimHardware OSH PB Controller")) {
+			switch(code) {
+			case ABS_Z:		// Analog1 X
+			case ABS_RX:	// Analog1 Y
+				event.value *= -1;
+				break;
+			default:
+				break;
+			}
+		}
 		if (event.value == joydev->abs[event.number])
 			return;
 		joydev->abs[event.number] = event.value;
@@ -601,6 +612,12 @@ static long joydev_compat_ioctl(struct file *file,
 		goto out;
 	}
 
+	// [RG351V] OpenSimHardware OSH PB Controller
+	if (!strcmp(joydev->handle.dev->name, "OpenSimHardware OSH PB Controller")) {
+		joydev->nabs = 8;
+		joydev->nkey = 12;
+	}
+
 	switch (cmd) {
 
 	case JS_SET_TIMELIMIT:
@@ -666,6 +683,12 @@ static long joydev_ioctl(struct file *file,
 		goto out;
 	}
 
+	// [RG351V] OpenSimHardware OSH PB Controller
+	if (!strcmp(joydev->handle.dev->name, "OpenSimHardware OSH PB Controller")) {
+		joydev->nabs = 8;
+		joydev->nkey = 12;
+	}
+
 	switch (cmd) {
 
 	case JS_SET_TIMELIMIT:
