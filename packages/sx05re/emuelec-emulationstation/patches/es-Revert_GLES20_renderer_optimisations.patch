https://github.com/british-choi/EmuELEC/issues/10
Issue : ES의 Gamelist font가 깨지는 현상 
RC : batocera-emulationstation의 commit 73fc3bbb3c4f7903ad68b5236f7d7bd9c2eeeae1 (GLES20 renderer : New optimisations. Thanks to rtissera)
     적용시 발생하는 것으로 확인됨. Renderer optimisation 부분의 버그로 보여짐
CA : Transform4x4f.cpp/h의 수정사항을 제외하고 (다른 곳에서 사용되고 있음) Revert 시킴

diff --git a/es-core/src/components/TextComponent.cpp b/es-core/src/components/TextComponent.cpp
index aa9fda86..2736cb38 100644
--- a/es-core/src/components/TextComponent.cpp
+++ b/es-core/src/components/TextComponent.cpp
@@ -126,18 +126,22 @@ void TextComponent::setUppercase(bool uppercase)
 	onTextChanged();
 }
 
-void TextComponent::renderSingleGlow(const Transform4x4f& parentTrans, float yOff, float x, float y, bool verticesChanged)
+void TextComponent::renderSingleGlow(const Transform4x4f& parentTrans, float yOff, float x, float y)
 {
-	Transform4x4f trans = parentTrans;
-	trans.translate(x, y);
+	Vector3f off = Vector3f(mPadding.x() + x + mGlowOffset.x(), mPadding.y() + yOff + y + mGlowOffset.y(), 0);
+
+	Transform4x4f trans = parentTrans * getTransform();
+	trans.translate(off);
+
 	Renderer::setMatrix(trans);
-	mFont->renderTextCache(mTextCache.get(), verticesChanged);
+	mFont->renderTextCache(mTextCache.get());	
 }
 
 void TextComponent::renderGlow(const Transform4x4f& parentTrans, float yOff, float xOff)
 {
 	Transform4x4f glowTrans = parentTrans;
-	glowTrans.translate(mPadding.x() + mGlowOffset.x() + xOff, mPadding.y() + mGlowOffset.y() + yOff);
+	if (xOff != 0.0)
+		glowTrans.translate(Vector3f(xOff, 0, 0));
 
 	mTextCache->setRenderingGlow(true);
 	
@@ -147,9 +151,9 @@ void TextComponent::renderGlow(const Transform4x4f& parentTrans, float yOff, flo
 		mTextCache->setColor((mGlowColor & 0xFFFFFF00) | (unsigned char)(a * (mOpacity / 255.0)));
 
 		renderSingleGlow(glowTrans, yOff, 1, 0);
-		renderSingleGlow(glowTrans, yOff, 0, 1, false);
-		renderSingleGlow(glowTrans, yOff, -1, 0, false);
-		renderSingleGlow(glowTrans, yOff, 0, -1, false);
+		renderSingleGlow(glowTrans, yOff, 0, 1);
+		renderSingleGlow(glowTrans, yOff, -1, 0);
+		renderSingleGlow(glowTrans, yOff, 0, -1);
 	}
 	else
 	{
@@ -161,16 +165,16 @@ void TextComponent::renderGlow(const Transform4x4f& parentTrans, float yOff, flo
 		renderSingleGlow(glowTrans, yOff, x, y);
 
 		for (int i = 0; i < 2 * mGlowSize; i++)
-			renderSingleGlow(glowTrans, yOff, ++x, y, false);
+			renderSingleGlow(glowTrans, yOff, ++x, y);
 
 		for (int i = 0; i < 2 * mGlowSize; i++)
-			renderSingleGlow(glowTrans, yOff, x, ++y, false);
+			renderSingleGlow(glowTrans, yOff, x, ++y);
 
 		for (int i = 0; i < 2 * mGlowSize; i++)
-			renderSingleGlow(glowTrans, yOff, --x, y, false);
+			renderSingleGlow(glowTrans, yOff, --x, y);
 
 		for (int i = 0; i < 2 * mGlowSize; i++)
-			renderSingleGlow(glowTrans, yOff, x, --y, false);
+			renderSingleGlow(glowTrans, yOff, x, --y);
 	}
 
 	mTextCache->setRenderingGlow(false);
diff --git a/es-core/src/components/TextComponent.h b/es-core/src/components/TextComponent.h
index 1793055e..d37093e6 100644
--- a/es-core/src/components/TextComponent.h
+++ b/es-core/src/components/TextComponent.h
@@ -81,7 +81,7 @@ protected:
 	std::string mSourceText;
 
 private:	
-	void renderSingleGlow(const Transform4x4f& parentTrans, float yOff, float x, float y, bool verticesChanged = true);
+	void renderSingleGlow(const Transform4x4f& parentTrans, float yOff, float x, float y);
 	void renderGlow(const Transform4x4f& parentTrans, float yOff, float xOff);
 
 	void onColorChanged();
diff --git a/es-core/src/renderers/Renderer.cpp b/es-core/src/renderers/Renderer.cpp
index 942bdf25..46d1eb92 100644
--- a/es-core/src/renderers/Renderer.cpp
+++ b/es-core/src/renderers/Renderer.cpp
@@ -669,9 +669,9 @@ namespace Renderer
 		Instance()->drawLines(_vertices, _numVertices, _srcBlendFactor, _dstBlendFactor);
 	}
 
-	void drawTriangleStrips(const Vertex* _vertices, const unsigned int _numVertices, const Blend::Factor _srcBlendFactor, const Blend::Factor _dstBlendFactor, bool verticesChanged)
+	void drawTriangleStrips(const Vertex* _vertices, const unsigned int _numVertices, const Blend::Factor _srcBlendFactor, const Blend::Factor _dstBlendFactor)
 	{
-		Instance()->drawTriangleStrips(_vertices, _numVertices, _srcBlendFactor, _dstBlendFactor, verticesChanged);
+		Instance()->drawTriangleStrips(_vertices, _numVertices, _srcBlendFactor, _dstBlendFactor);
 	}
 
 	void drawTriangleFan(const Vertex* _vertices, const unsigned int _numVertices, const Blend::Factor _srcBlendFactor, const Blend::Factor _dstBlendFactor)
diff --git a/es-core/src/renderers/Renderer.h b/es-core/src/renderers/Renderer.h
index f2e100cd..e59a3da5 100644
--- a/es-core/src/renderers/Renderer.h
+++ b/es-core/src/renderers/Renderer.h
@@ -82,7 +82,7 @@ namespace Renderer
 		virtual void         bindTexture(const unsigned int _texture) = 0;
 
 		virtual void         drawLines(const Vertex* _vertices, const unsigned int _numVertices, const Blend::Factor _srcBlendFactor = Blend::SRC_ALPHA, const Blend::Factor _dstBlendFactor = Blend::ONE_MINUS_SRC_ALPHA) = 0;
-		virtual void         drawTriangleStrips(const Vertex* _vertices, const unsigned int _numVertices, const Blend::Factor _srcBlendFactor = Blend::SRC_ALPHA, const Blend::Factor _dstBlendFactor = Blend::ONE_MINUS_SRC_ALPHA, bool verticesChanged = true) = 0;
+		virtual void         drawTriangleStrips(const Vertex* _vertices, const unsigned int _numVertices, const Blend::Factor _srcBlendFactor = Blend::SRC_ALPHA, const Blend::Factor _dstBlendFactor = Blend::ONE_MINUS_SRC_ALPHA) = 0;
 		virtual void		 drawTriangleFan(const Vertex* _vertices, const unsigned int _numVertices, const Blend::Factor _srcBlendFactor = Blend::SRC_ALPHA, const Blend::Factor _dstBlendFactor = Blend::ONE_MINUS_SRC_ALPHA) = 0;
 
 		virtual void         setProjection(const Transform4x4f& _projection) = 0;
@@ -130,7 +130,7 @@ namespace Renderer
 	void         updateTexture     (const unsigned int _texture, const Texture::Type _type, const unsigned int _x, const unsigned _y, const unsigned int _width, const unsigned int _height, void* _data);
 	void         bindTexture       (const unsigned int _texture);
 	void         drawLines         (const Vertex* _vertices, const unsigned int _numVertices, const Blend::Factor _srcBlendFactor = Blend::SRC_ALPHA, const Blend::Factor _dstBlendFactor = Blend::ONE_MINUS_SRC_ALPHA);
-	void         drawTriangleStrips(const Vertex* _vertices, const unsigned int _numVertices, const Blend::Factor _srcBlendFactor = Blend::SRC_ALPHA, const Blend::Factor _dstBlendFactor = Blend::ONE_MINUS_SRC_ALPHA, bool verticesChanged = true);
+	void         drawTriangleStrips(const Vertex* _vertices, const unsigned int _numVertices, const Blend::Factor _srcBlendFactor = Blend::SRC_ALPHA, const Blend::Factor _dstBlendFactor = Blend::ONE_MINUS_SRC_ALPHA);
 	void         setProjection     (const Transform4x4f& _projection);
 	void         setMatrix         (const Transform4x4f& _matrix);
 	void         setViewport       (const Rect& _viewport);
diff --git a/es-core/src/renderers/Renderer_GL21.cpp b/es-core/src/renderers/Renderer_GL21.cpp
index d718b008..9bf3955a 100644
--- a/es-core/src/renderers/Renderer_GL21.cpp
+++ b/es-core/src/renderers/Renderer_GL21.cpp
@@ -208,7 +208,58 @@ namespace Renderer
 
 	} // drawLines
 
-	void OpenGL21Renderer::drawTriangleStrips(const Vertex* _vertices, const unsigned int _numVertices, const Blend::Factor _srcBlendFactor, const Blend::Factor _dstBlendFactor, bool verticesChanged)
+	static void setGrayscale()
+	{
+		glMatrixMode(GL_COLOR);
+
+		GLfloat grayScale[16] =
+		{
+			.3f, .3f, .3f, 0.0f,
+			.59f, .59f, .59f, 0.0f,
+			.11f, .11f, .11f, 0.0f,
+			0.0f, 0.0f, 0.0f, 1.0f
+		};
+		glLoadMatrixf(grayScale);
+	} // setGrayscale
+
+
+	struct Vertex4f
+	{
+		Vertex4f() { }
+		Vertex4f(const Vector2f& _pos, const Vector2f& _tex, const unsigned int _col) : pos(_pos), tex(_tex), col(_col) { }
+
+		Vector3f		pos;
+		Vector4f		tex;
+
+		unsigned int col;
+
+	}; // Vertex
+
+	static void correctQuad(Vertex4f& v1, Vertex4f& v2, Vertex4f& v3, Vertex4f& v4)
+	{
+		// detects intersection of two diagonal lines
+		float divisor = (v4.pos.y() - v3.pos.y()) * (v2.pos.x() - v1.pos.x()) - (v4.pos.x() - v3.pos.x()) * (v2.pos.y() - v1.pos.y());
+		float ua = ((v4.pos.x() - v3.pos.x()) * (v1.pos.y() - v3.pos.y()) - (v4.pos.y() - v3.pos.y()) * (v1.pos.x() - v3.pos.x())) / divisor;
+		float ub = ((v2.pos.x() - v1.pos.x()) * (v1.pos.y() - v3.pos.y()) - (v2.pos.y() - v1.pos.y()) * (v1.pos.x() - v3.pos.x())) / divisor;
+
+		// calculates the intersection point
+		float centerX = v1.pos.x() + ua * (v2.pos.x() - v1.pos.x());
+		float centerY = v1.pos.y() + ub * (v2.pos.y() - v1.pos.y());
+		Vector3f center(v2.pos.x() - centerX, v2.pos.y() - centerY, 0.5f);
+
+		float d1 = Vector3f(v1.pos - center).length();
+		float d2 = Vector3f(v2.pos - center).length();
+		float d3 = Vector3f(v3.pos - center).length();
+		float d4 = Vector3f(v4.pos - center).length();
+	
+		// calculates quotients used as w component in uvw texture mapping
+		v1.tex *= isnan(d2) || d2 == 0.0f ? 1.0f : (d1 + d2) / d2;
+		v2.tex *= isnan(d1) || d1 == 0.0f ? 1.0f : (d2 + d1) / d1;
+		v3.tex *= isnan(d4) || d4 == 0.0f ? 1.0f : (d3 + d4) / d4;
+		v4.tex *= isnan(d3) || d3 == 0.0f ? 1.0f : (d4 + d3) / d3;
+	}
+
+	void OpenGL21Renderer::drawTriangleStrips(const Vertex* _vertices, const unsigned int _numVertices, const Blend::Factor _srcBlendFactor, const Blend::Factor _dstBlendFactor)
 	{
 		glEnable(GL_BLEND);
 		glBlendFunc(convertBlendFactor(_srcBlendFactor), convertBlendFactor(_dstBlendFactor));
@@ -216,12 +267,39 @@ namespace Renderer
 		glEnableClientState(GL_VERTEX_ARRAY);
 		glEnableClientState(GL_TEXTURE_COORD_ARRAY);
 		glEnableClientState(GL_COLOR_ARRAY);
+		/*
+		if (_numVertices == 4)
+		{
+			Vertex4f v[4];
+			for (int i = 0; i < 4; i++)
+			{
+				v[i].pos = Vector3f(_vertices[i].pos, 0);
+				v[i].tex = Vector4f(_vertices[i].tex, 0, 1);
+				v[i].col = _vertices[i].col;
+			}
+
+#define	ES_PI (3.1415926535897932384626433832795028841971693993751058209749445923)
+#define	ES_RAD_TO_DEG(_x) ((_x) * (180.0 / ES_PI))
+#define	ES_DEG_TO_RAD(_x) ((_x) * (ES_PI / 180.0))
+
+
+			if (_vertices[2].tex.x() != 0)
+				correctQuad(v[0], v[3], v[1], v[2]);
+			
+			glVertexPointer(3, GL_FLOAT, sizeof(Vertex4f), &v[0].pos);
+			glTexCoordPointer(4, GL_FLOAT, sizeof(Vertex4f), &v[0].tex);
+			glColorPointer(4, GL_UNSIGNED_BYTE, sizeof(Vertex4f), &v[0].col);
+			glDrawArrays(GL_TRIANGLE_STRIP, 0, _numVertices);
+
+		}
+		else*/
+		{
+			glVertexPointer(2, GL_FLOAT, sizeof(Vertex), &_vertices[0].pos);
+			glTexCoordPointer(2, GL_FLOAT, sizeof(Vertex), &_vertices[0].tex);
+			glColorPointer(4, GL_UNSIGNED_BYTE, sizeof(Vertex), &_vertices[0].col);
+			glDrawArrays(GL_TRIANGLE_STRIP, 0, _numVertices);
+		}
 
-		glVertexPointer(2, GL_FLOAT, sizeof(Vertex), &_vertices[0].pos);
-		glTexCoordPointer(2, GL_FLOAT, sizeof(Vertex), &_vertices[0].tex);
-		glColorPointer(4, GL_UNSIGNED_BYTE, sizeof(Vertex), &_vertices[0].col);
-		glDrawArrays(GL_TRIANGLE_STRIP, 0, _numVertices);
-		
 		glDisableClientState(GL_COLOR_ARRAY);
 		glDisableClientState(GL_TEXTURE_COORD_ARRAY);
 		glDisableClientState(GL_VERTEX_ARRAY);
diff --git a/es-core/src/renderers/Renderer_GL21.h b/es-core/src/renderers/Renderer_GL21.h
index 796934b0..b7ee23f1 100644
--- a/es-core/src/renderers/Renderer_GL21.h
+++ b/es-core/src/renderers/Renderer_GL21.h
@@ -29,7 +29,7 @@ namespace Renderer
 		void         bindTexture(const unsigned int _texture) override;
 
 		void         drawLines(const Vertex* _vertices, const unsigned int _numVertices, const Blend::Factor _srcBlendFactor = Blend::SRC_ALPHA, const Blend::Factor _dstBlendFactor = Blend::ONE_MINUS_SRC_ALPHA) override;
-		void         drawTriangleStrips(const Vertex* _vertices, const unsigned int _numVertices, const Blend::Factor _srcBlendFactor = Blend::SRC_ALPHA, const Blend::Factor _dstBlendFactor = Blend::ONE_MINUS_SRC_ALPHA, bool verticesChanged = true) override;
+		void         drawTriangleStrips(const Vertex* _vertices, const unsigned int _numVertices, const Blend::Factor _srcBlendFactor = Blend::SRC_ALPHA, const Blend::Factor _dstBlendFactor = Blend::ONE_MINUS_SRC_ALPHA) override;
 		void		 drawTriangleFan(const Vertex* _vertices, const unsigned int _numVertices, const Blend::Factor _srcBlendFactor = Blend::SRC_ALPHA, const Blend::Factor _dstBlendFactor = Blend::ONE_MINUS_SRC_ALPHA) override;
 
 		void         setProjection(const Transform4x4f& _projection) override;
diff --git a/es-core/src/renderers/Renderer_GLES10.cpp b/es-core/src/renderers/Renderer_GLES10.cpp
index cb1ee031..272246ea 100644
--- a/es-core/src/renderers/Renderer_GLES10.cpp
+++ b/es-core/src/renderers/Renderer_GLES10.cpp
@@ -202,7 +202,7 @@ namespace Renderer
 
 	} // drawLines
 
-	void GLES10Renderer::drawTriangleStrips(const Vertex* _vertices, const unsigned int _numVertices, const Blend::Factor _srcBlendFactor, const Blend::Factor _dstBlendFactor, bool verticesChanged)
+	void GLES10Renderer::drawTriangleStrips(const Vertex* _vertices, const unsigned int _numVertices, const Blend::Factor _srcBlendFactor, const Blend::Factor _dstBlendFactor)
 	{
 		glEnable(GL_BLEND);
 		glBlendFunc(convertBlendFactor(_srcBlendFactor), convertBlendFactor(_dstBlendFactor));
diff --git a/es-core/src/renderers/Renderer_GLES10.h b/es-core/src/renderers/Renderer_GLES10.h
index 3b29a574..42e222e9 100644
--- a/es-core/src/renderers/Renderer_GLES10.h
+++ b/es-core/src/renderers/Renderer_GLES10.h
@@ -29,7 +29,7 @@ namespace Renderer
 		void         bindTexture(const unsigned int _texture) override;
 
 		void         drawLines(const Vertex* _vertices, const unsigned int _numVertices, const Blend::Factor _srcBlendFactor = Blend::SRC_ALPHA, const Blend::Factor _dstBlendFactor = Blend::ONE_MINUS_SRC_ALPHA) override;
-		void         drawTriangleStrips(const Vertex* _vertices, const unsigned int _numVertices, const Blend::Factor _srcBlendFactor = Blend::SRC_ALPHA, const Blend::Factor _dstBlendFactor = Blend::ONE_MINUS_SRC_ALPHA, bool verticesChanged = true) override;
+		void         drawTriangleStrips(const Vertex* _vertices, const unsigned int _numVertices, const Blend::Factor _srcBlendFactor = Blend::SRC_ALPHA, const Blend::Factor _dstBlendFactor = Blend::ONE_MINUS_SRC_ALPHA) override;
 		void		 drawTriangleFan(const Vertex* _vertices, const unsigned int _numVertices, const Blend::Factor _srcBlendFactor = Blend::SRC_ALPHA, const Blend::Factor _dstBlendFactor = Blend::ONE_MINUS_SRC_ALPHA) override;
 
 		void         setProjection(const Transform4x4f& _projection) override;
diff --git a/es-core/src/renderers/Renderer_GLES20.cpp b/es-core/src/renderers/Renderer_GLES20.cpp
index a5f82598..a30c49a4 100644
--- a/es-core/src/renderers/Renderer_GLES20.cpp
+++ b/es-core/src/renderers/Renderer_GLES20.cpp
@@ -9,7 +9,6 @@
 #include "Settings.h"
 
 #include <vector>
-#include <set>
 
 #include "GlExtensions.h"
 #include "Shader.h"
@@ -33,13 +32,8 @@ namespace Renderer
 	static Shader  	fragmentShaderColorNoTexture;
 	static ShaderProgram    shaderProgramColorNoTexture;
 
-	static Shader  	fragmentShaderAlpha;
-	static ShaderProgram    shaderProgramAlpha;
-
 	static GLuint        vertexBuffer     = 0;
 
-	static std::set<unsigned int> _alphaTextures;
-
 	static unsigned int boundTexture = 0;
 
 //////////////////////////////////////////////////////////////////////////
@@ -54,8 +48,6 @@ namespace Renderer
 				GL_CHECK_ERROR(glUniformMatrix4fv(shaderProgramColorTexture.mvpUniform, 1, GL_FALSE, (float*)&mvpMatrix));
 			else  if (currentProgram == &shaderProgramColorNoTexture)
 				GL_CHECK_ERROR(glUniformMatrix4fv(shaderProgramColorNoTexture.mvpUniform, 1, GL_FALSE, (float*)&mvpMatrix));
-			else  if (currentProgram == &shaderProgramAlpha)
-				GL_CHECK_ERROR(glUniformMatrix4fv(shaderProgramAlpha.mvpUniform, 1, GL_FALSE, (float*)&mvpMatrix));
 
 			return;
 		}
@@ -74,13 +66,6 @@ namespace Renderer
 				GL_CHECK_ERROR(glDisableVertexAttribArray(shaderProgramColorNoTexture.posAttrib));
 				GL_CHECK_ERROR(glDisableVertexAttribArray(shaderProgramColorNoTexture.colAttrib));
 			}
-
-			if (currentProgram == &shaderProgramAlpha)
-			{
-				GL_CHECK_ERROR(glDisableVertexAttribArray(shaderProgramAlpha.posAttrib));
-				GL_CHECK_ERROR(glDisableVertexAttribArray(shaderProgramAlpha.colAttrib));
-				GL_CHECK_ERROR(glDisableVertexAttribArray(shaderProgramAlpha.texAttrib));
-			}
 		}
 
 		currentProgram = program;
@@ -112,21 +97,6 @@ namespace Renderer
 			GL_CHECK_ERROR(glVertexAttribPointer(shaderProgramColorNoTexture.colAttrib, 4, GL_UNSIGNED_BYTE, GL_TRUE, sizeof(Vertex), (const void*)offsetof(Vertex, col)));
 			GL_CHECK_ERROR(glEnableVertexAttribArray(shaderProgramColorNoTexture.colAttrib));
 		}
-
-		if (currentProgram == &shaderProgramAlpha)
-		{
-			GL_CHECK_ERROR(glUseProgram(shaderProgramAlpha.id));
-			GL_CHECK_ERROR(glUniformMatrix4fv(shaderProgramAlpha.mvpUniform, 1, GL_FALSE, (float*)&mvpMatrix));
-
-			GL_CHECK_ERROR(glVertexAttribPointer(shaderProgramAlpha.posAttrib, 2, GL_FLOAT, GL_FALSE, sizeof(Vertex), (const void*)offsetof(Vertex, pos)));
-			GL_CHECK_ERROR(glEnableVertexAttribArray(shaderProgramAlpha.posAttrib));
-
-			GL_CHECK_ERROR(glVertexAttribPointer(shaderProgramAlpha.colAttrib, 4, GL_UNSIGNED_BYTE, GL_TRUE, sizeof(Vertex), (const void*)offsetof(Vertex, col)));
-			GL_CHECK_ERROR(glEnableVertexAttribArray(shaderProgramAlpha.colAttrib));
-
-			GL_CHECK_ERROR(glVertexAttribPointer(shaderProgramAlpha.texAttrib, 2, GL_FLOAT, GL_FALSE, sizeof(Vertex), (const void*)offsetof(Vertex, tex)));
-			GL_CHECK_ERROR(glEnableVertexAttribArray(shaderProgramAlpha.texAttrib));
-		}
 	}
 
 	static void setupShaders()
@@ -165,7 +135,7 @@ namespace Renderer
 		// fragment shader (no texture)
 		std::string fragmentSourceNoTexture =
 			SHADER_VERSION_STRING +
-			"precision mediump float;     \n"
+			"precision highp float;     \n"
 			"varying   vec4  v_col;     \n"
 			"void main(void)            \n"
 			"{                          \n"
@@ -205,7 +175,7 @@ namespace Renderer
 		// fragment shader (texture)
 		std::string fragmentSourceTexture =
 			SHADER_VERSION_STRING +
-			"precision mediump float;       \n"
+			"precision highp float;       \n"
 #if defined(USE_OPENGLES_20)
 			"precision mediump sampler2D; \n"
 #endif
@@ -234,37 +204,6 @@ namespace Renderer
 		GLint texUniform = glGetUniformLocation(shaderProgramColorTexture.id, "u_tex");
 		GL_CHECK_ERROR(glUniform1i(texUniform, 0));
 
-
-		// fragment shader (alpha texture)
-		std::string fragmentSourceAlpha =
-			SHADER_VERSION_STRING +
-			"precision mediump float;       \n"
-#if defined(USE_OPENGLES_20)
-			"precision mediump sampler2D; \n"
-#endif
-			"varying   vec4      v_col; \n"
-			"varying   vec2      v_tex; \n"
-			"uniform   sampler2D u_tex; \n"
-			"void main(void)                                              \n"
-			"{                                                            \n"
-			"    vec4 a = vec4(1.0, 1.0, 1.0, texture2D(u_tex, v_tex).a); \n"
-			"    gl_FragColor = a * v_col;      					      \n"
-			"}\n";
-
-
-		const GLuint fragmentShaderAlphaId = glCreateShader(GL_FRAGMENT_SHADER);
-		result = fragmentShaderAlpha.compile(fragmentShaderAlphaId, fragmentSourceAlpha.c_str());
-		result = shaderProgramAlpha.linkShaderProgram(vertexShaderTexture, fragmentShaderAlpha);
-
-		// Set shader active, retrieve attributes and uniforms locations
-		GL_CHECK_ERROR(glUseProgram(shaderProgramAlpha.id));
-		shaderProgramAlpha.posAttrib = glGetAttribLocation(shaderProgramAlpha.id, "a_pos");
-		shaderProgramAlpha.colAttrib = glGetAttribLocation(shaderProgramAlpha.id, "a_col");
-		shaderProgramAlpha.texAttrib = glGetAttribLocation(shaderProgramAlpha.id, "a_tex");
-		shaderProgramAlpha.mvpUniform = glGetUniformLocation(shaderProgramAlpha.id, "u_mvp");
-		texUniform = glGetUniformLocation(shaderProgramAlpha.id, "u_tex");
-		GL_CHECK_ERROR(glUniform1i(texUniform, 0));
-
 		useProgram(nullptr);
 	} // setupShaders
 
@@ -305,11 +244,7 @@ namespace Renderer
 		switch(_type)
 		{
 			case Texture::RGBA:  { return GL_RGBA;            } break;
-#if defined(USE_OPENGLES_20)
-			case Texture::ALPHA: { return GL_ALPHA; } break;
-#else
 			case Texture::ALPHA: { return GL_LUMINANCE_ALPHA; } break;
-#endif
 			default:             { return GL_ZERO;            }
 		}
 
@@ -524,9 +459,6 @@ namespace Renderer
 			}
 		}
 
-		if (type == GL_ALPHA && texture != 0 && _alphaTextures.find(texture) == _alphaTextures.cend())
-			_alphaTextures.insert(texture);
-
 		return texture;
 
 	} // createTexture
@@ -535,10 +467,6 @@ namespace Renderer
 
 	void GLES20Renderer::destroyTexture(const unsigned int _texture)
 	{
-		auto it = _alphaTextures.find(_texture);
-		if (it != _alphaTextures.cend())
-			_alphaTextures.erase(it);
-
 		GL_CHECK_ERROR(glDeleteTextures(1, &_texture));
 
 	} // destroyTexture
@@ -553,7 +481,7 @@ namespace Renderer
 
 		// Regular GL_ALPHA textures are black + alpha in shaders
 		// Create a GL_LUMINANCE_ALPHA texture instead so its white + alpha
-		if (type == GL_LUMINANCE_ALPHA)
+		if(type == GL_LUMINANCE_ALPHA)
 		{
 			uint8_t* a_data  = (uint8_t*)_data;
 			uint8_t* la_data = new uint8_t[_width * _height * 2];
@@ -606,52 +534,33 @@ namespace Renderer
 		useProgram(&shaderProgramColorNoTexture);
 
 		// Do rendering
-		if (_srcBlendFactor != Blend::ONE && _dstBlendFactor != Blend::ONE)
-		{
-			GL_CHECK_ERROR(glEnable(GL_BLEND));
-			GL_CHECK_ERROR(glBlendFunc(convertBlendFactor(_srcBlendFactor), convertBlendFactor(_dstBlendFactor)));
-			GL_CHECK_ERROR(glDrawArrays(GL_LINES, 0, _numVertices));
-			GL_CHECK_ERROR(glDisable(GL_BLEND));
-		}
-		else
-		{
-			GL_CHECK_ERROR(glDisable(GL_BLEND));
-			GL_CHECK_ERROR(glDrawArrays(GL_LINES, 0, _numVertices));
-		}
+		GL_CHECK_ERROR(glEnable(GL_BLEND));
+		GL_CHECK_ERROR(glBlendFunc(convertBlendFactor(_srcBlendFactor), convertBlendFactor(_dstBlendFactor)));
+		GL_CHECK_ERROR(glDrawArrays(GL_LINES, 0, _numVertices));
+		GL_CHECK_ERROR(glDisable(GL_BLEND));
 
 	} // drawLines
 
 //////////////////////////////////////////////////////////////////////////
 
-	void GLES20Renderer::drawTriangleStrips(const Vertex* _vertices, const unsigned int _numVertices, const Blend::Factor _srcBlendFactor, const Blend::Factor _dstBlendFactor, bool verticesChanged)
+
+	void GLES20Renderer::drawTriangleStrips(const Vertex* _vertices, const unsigned int _numVertices, const Blend::Factor _srcBlendFactor, const Blend::Factor _dstBlendFactor)
 	{
-		if (verticesChanged)
-			GL_CHECK_ERROR(glBufferData(GL_ARRAY_BUFFER, sizeof(Vertex) * _numVertices, _vertices, GL_DYNAMIC_DRAW));
+		// Pass buffer data
+		GL_CHECK_ERROR(glBufferData(GL_ARRAY_BUFFER, sizeof(Vertex) * _numVertices, _vertices, GL_DYNAMIC_DRAW));		
 
 		// Setup shader
 		if (boundTexture != 0)
-		{
-			if (_alphaTextures.find(boundTexture) != _alphaTextures.cend())
-				useProgram(&shaderProgramAlpha);
-			else
-				useProgram(&shaderProgramColorTexture);
-		}
+			useProgram(&shaderProgramColorTexture);
 		else
 			useProgram(&shaderProgramColorNoTexture);
 
 		// Do rendering
-		if (_srcBlendFactor != Blend::ONE && _dstBlendFactor != Blend::ONE)
-		{
-			GL_CHECK_ERROR(glEnable(GL_BLEND));
-			GL_CHECK_ERROR(glBlendFunc(convertBlendFactor(_srcBlendFactor), convertBlendFactor(_dstBlendFactor)));
-			GL_CHECK_ERROR(glDrawArrays(GL_TRIANGLE_STRIP, 0, _numVertices));
-			GL_CHECK_ERROR(glDisable(GL_BLEND));
-		}
-		else
-		{
-			GL_CHECK_ERROR(glDisable(GL_BLEND));
-			GL_CHECK_ERROR(glDrawArrays(GL_TRIANGLE_STRIP, 0, _numVertices));
-		}
+		GL_CHECK_ERROR(glEnable(GL_BLEND));
+		GL_CHECK_ERROR(glBlendFunc(convertBlendFactor(_srcBlendFactor), convertBlendFactor(_dstBlendFactor)));
+		GL_CHECK_ERROR(glDrawArrays(GL_TRIANGLE_STRIP, 0, _numVertices));
+		GL_CHECK_ERROR(glDisable(GL_BLEND));
+
 	} // drawTriangleStrips
 
 //////////////////////////////////////////////////////////////////////////
@@ -736,28 +645,15 @@ namespace Renderer
 
 		// Setup shader
 		if (boundTexture != 0)
-		{
-			if (_alphaTextures.find(boundTexture) != _alphaTextures.cend())
-				useProgram(&shaderProgramAlpha);
-			else
-				useProgram(&shaderProgramColorTexture);
-		}
+			useProgram(&shaderProgramColorTexture);
 		else
 			useProgram(&shaderProgramColorNoTexture);
 
 		// Do rendering
-		if (_srcBlendFactor != Blend::ONE && _dstBlendFactor != Blend::ONE)
-		{
-			GL_CHECK_ERROR(glEnable(GL_BLEND));
-			GL_CHECK_ERROR(glBlendFunc(convertBlendFactor(_srcBlendFactor), convertBlendFactor(_dstBlendFactor)));
-			GL_CHECK_ERROR(glDrawArrays(GL_TRIANGLE_FAN, 0, _numVertices));
-			GL_CHECK_ERROR(glDisable(GL_BLEND));
-		}
-		else
-		{
-			GL_CHECK_ERROR(glDisable(GL_BLEND));
-			GL_CHECK_ERROR(glDrawArrays(GL_TRIANGLE_FAN, 0, _numVertices));			
-		}
+		GL_CHECK_ERROR(glEnable(GL_BLEND));
+		GL_CHECK_ERROR(glBlendFunc(convertBlendFactor(_srcBlendFactor), convertBlendFactor(_dstBlendFactor)));
+		GL_CHECK_ERROR(glDrawArrays(GL_TRIANGLE_FAN, 0, _numVertices));
+		GL_CHECK_ERROR(glDisable(GL_BLEND));
 	}
 
 	void GLES20Renderer::setStencil(const Vertex* _vertices, const unsigned int _numVertices)
diff --git a/es-core/src/renderers/Renderer_GLES20.h b/es-core/src/renderers/Renderer_GLES20.h
index 98a1b9e3..d6092e79 100644
--- a/es-core/src/renderers/Renderer_GLES20.h
+++ b/es-core/src/renderers/Renderer_GLES20.h
@@ -28,7 +28,7 @@ namespace Renderer
 		void         bindTexture(const unsigned int _texture) override;
 
 		void         drawLines(const Vertex* _vertices, const unsigned int _numVertices, const Blend::Factor _srcBlendFactor = Blend::SRC_ALPHA, const Blend::Factor _dstBlendFactor = Blend::ONE_MINUS_SRC_ALPHA) override;
-		void         drawTriangleStrips(const Vertex* _vertices, const unsigned int _numVertices, const Blend::Factor _srcBlendFactor = Blend::SRC_ALPHA, const Blend::Factor _dstBlendFactor = Blend::ONE_MINUS_SRC_ALPHA, bool verticesChanged = true) override;
+		void         drawTriangleStrips(const Vertex* _vertices, const unsigned int _numVertices, const Blend::Factor _srcBlendFactor = Blend::SRC_ALPHA, const Blend::Factor _dstBlendFactor = Blend::ONE_MINUS_SRC_ALPHA) override;
 		void		 drawTriangleFan(const Vertex* _vertices, const unsigned int _numVertices, const Blend::Factor _srcBlendFactor = Blend::SRC_ALPHA, const Blend::Factor _dstBlendFactor = Blend::ONE_MINUS_SRC_ALPHA) override;
 
 		void         setProjection(const Transform4x4f& _projection) override;
diff --git a/es-core/src/resources/Font.cpp b/es-core/src/resources/Font.cpp
index 378b4dba..2ee21a97 100644
--- a/es-core/src/resources/Font.cpp
+++ b/es-core/src/resources/Font.cpp
@@ -382,8 +382,7 @@ Font::Glyph* Font::getGlyph(unsigned int id)
 	pGlyph->glyphSize = glyphSize;
 
 	// upload glyph bitmap to texture
-	if (glyphSize.x() > 0 && glyphSize.y() > 0)
-		Renderer::updateTexture(tex->textureId, Renderer::Texture::ALPHA, cursor.x(), cursor.y(), glyphSize.x(), glyphSize.y(), g->bitmap.buffer);
+	Renderer::updateTexture(tex->textureId, Renderer::Texture::ALPHA, cursor.x(), cursor.y(), glyphSize.x(), glyphSize.y(), g->bitmap.buffer);
 
 	// update max glyph height
 	if(glyphSize.y() > mMaxGlyphHeight)
@@ -424,7 +423,7 @@ void Font::rebuildTextures()
 	}
 }
 
-void Font::renderTextCache(TextCache* cache, bool verticesChanged)
+void Font::renderTextCache(TextCache* cache)
 {
 	if(cache == NULL)
 	{
@@ -446,17 +445,17 @@ void Font::renderTextCache(TextCache* cache, bool verticesChanged)
 		}
 
 		if (tex != 0)
-			Renderer::drawTriangleStrips(&vertex.verts[0], vertex.verts.size(), Renderer::Blend::SRC_ALPHA, Renderer::Blend::ONE_MINUS_SRC_ALPHA, cache->vertexLists.size() > 1 || verticesChanged);
+			Renderer::drawTriangleStrips(&vertex.verts[0], vertex.verts.size());
 	}
 
-	if (cache->renderingGlow || !verticesChanged)
+	if (cache->renderingGlow)
 		return;
 
 	for (auto sub : cache->imageSubstitutes)
 	{
 		if (sub.texture && sub.texture->bind())
 		{
-			if (Settings::DebugImage())
+			if (Settings::DebugImage)
 				Renderer::drawRect(
 					sub.vertex[0].pos.x(), 
 					sub.vertex[0].pos.y(), 
diff --git a/es-core/src/resources/Font.h b/es-core/src/resources/Font.h
index da0bd113..429e00fd 100644
--- a/es-core/src/resources/Font.h
+++ b/es-core/src/resources/Font.h
@@ -53,7 +53,7 @@ public:
 	TextCache* buildTextCache(const std::string& text, float offsetX, float offsetY, unsigned int color);
 	TextCache* buildTextCache(const std::string& text, Vector2f offset, unsigned int color, float xLen, Alignment alignment = ALIGN_LEFT, float lineSpacing = 1.5f);
 	
-	void renderTextCache(TextCache* cache, bool verticesChanged = true);
+	void renderTextCache(TextCache* cache);
 	void renderGradientTextCache(TextCache* cache, unsigned int colorTop, unsigned int colorBottom, bool horz = false);
 	
 	std::string wrapText(std::string text, float xLen); // Inserts newlines into text to make it wrap properly.
